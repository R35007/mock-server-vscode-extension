{
  "name": "mock-server",
  "displayName": "Mock Server",
  "description": "Customize Your Own Dynamic Local Mock Server",
  "version": "6.1.0",
  "publisher": "Thinker",
  "license": "MIT",
  "icon": "images/mockserverlogo.png",
  "author": {
    "name": "Sivaraman",
    "email": "sendmsg2siva@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/R35007/mock-server-vscode-extension"
  },
  "keywords": [
    "JSON",
    "REST",
    "API",
    "prototyping",
    "mock",
    "mock server",
    "mocking",
    "test",
    "testing",
    "rest",
    "data",
    "dummy",
    "sandbox",
    "server",
    "fake",
    "response",
    "db",
    "local"
  ],
  "engines": {
    "vscode": "^1.30.0"
  },
  "categories": [
    "Programming Languages"
  ],
  "activationEvents": [
    "*"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "mockServer.transformToMockServerDB",
        "title": "Transform To Mock Server DB",
        "category": "MockServer"
      },
      {
        "command": "mockServer.generateMockFiles",
        "title": "Generate Mock Files",
        "category": "MockServer"
      },
      {
        "command": "mockServer.startServer",
        "title": "Start Server",
        "category": "MockServer"
      },
      {
        "command": "mockServer.stopServer",
        "title": "Stop Server",
        "category": "MockServer"
      },
      {
        "command": "mockServer.resetServer",
        "title": "Reset Server",
        "category": "MockServer"
      },
      {
        "command": "mockServer.resetAndRestart",
        "title": "Reset and Restart Server",
        "category": "MockServer"
      },
      {
        "command": "mockServer.switchEnvironment",
        "title": "Switch Environment",
        "category": "MockServer"
      },
      {
        "command": "mockServer.getDbSnapShot",
        "title": "Get Db Snapshot",
        "category": "MockServer"
      },
      {
        "command": "mockServer.homePage",
        "title": "Open Home Page",
        "category": "MockServer"
      },
      {
        "command": "mockServer.setPort",
        "title": "Set Port",
        "category": "MockServer"
      },
      {
        "command": "mockServer.setRoot",
        "title": "Set as Server Root folder",
        "category": "MockServer"
      }
    ],
    "configuration": {
      "title": "Mock Server",
      "order": 1,
      "properties": {
        "mock-server.settings.paths": {
          "order": 1,
          "type": "object",
          "default": {
            "root": "./",
            "db": "db.json",
            "middleware": "middleware.js",
            "injectors": "injectors.json",
            "rewriters": "rewriters.json",
            "store": "store.json",
            "staticDir": "public",
            "envDir": "env",
            "snapshotDir": "snapshots"
          },
          "properties": {
            "root": {
              "type": "string",
              "default": "./mock",
              "description": "Set custom root path. Note : every other paths given in will be relative to this root path"
            },
            "db": {
              "type": "string",
              "default": "db.json",
              "description": "Set db.json file path"
            },
            "middleware": {
              "type": "string",
              "default": "middleware.js",
              "description": "Set middleware.js file path"
            },
            "injectors": {
              "type": "string",
              "default": "injectors.json",
              "description": "Set injectors.json file path"
            },
            "rewriters": {
              "type": "string",
              "default": "rewriters.json",
              "description": "Set rewriters.json file path"
            },
            "store": {
              "type": "string",
              "default": "store.json",
              "description": "Set store.json file path"
            },
            "staticDir": {
              "type": "string",
              "default": "",
              "description": "Set path to static files"
            },
            "envDir": {
              "type": "string",
              "default": "env",
              "description": "Set path to environment files"
            },
            "snapshotDir": {
              "type": "string",
              "default": "snapshots",
              "description": "Set SnapShot Folder directory"
            }
          },
          "description": "Set Database config paths",
          "additionalProperties": false
        },
        "mock-server.settings.port": {
          "order": 2,
          "type": "number",
          "default": 3000,
          "description": "Set custom port"
        },
        "mock-server.settings.host": {
          "order": 3,
          "type": "string",
          "default": "localhost",
          "description": "Set custom host"
        },
        "mock-server.settings.base": {
          "order": 4,
          "type": "string",
          "default": "",
          "description": "Set custom base url"
        },
        "mock-server.settings.id": {
          "order": 5,
          "type": "string",
          "default": "id",
          "description": "Set custom database id"
        },
        "mock-server.settings.dbMode": {
          "order": 6,
          "type": "string",
          "enum": [
            "mock",
            "fetch"
          ],
          "default": "mock",
          "description": "Helps to set the direct route value to the selected attribute."
        },
        "mock-server.settings.defaults": {
          "order": 7,
          "type": "object",
          "default": {
            "noGzip": false,
            "noCors": false,
            "readOnly": false,
            "logger": true,
            "bodyParser": true
          },
          "properties": {
            "noGzip": {
              "type": "boolean",
              "default": false,
              "description": "Disable compression."
            },
            "noCors": {
              "type": "boolean",
              "default": false,
              "description": "Disable CORS ( Cross Origin Resource Sharing) "
            },
            "readOnly": {
              "type": "boolean",
              "default": false,
              "description": "Accept only GET requests"
            },
            "logger": {
              "type": "boolean",
              "default": true,
              "description": "Enable logger middleware"
            },
            "bodyParser": {
              "type": "boolean",
              "default": true,
              "description": "Enable body-parser middleware"
            }
          },
          "description": "Add Default middlewares",
          "additionalProperties": false
        },
        "mock-server.settings.reverse": {
          "order": 8,
          "type": "boolean",
          "default": false,
          "description": "Generate Routes in reverse order"
        },
        "mock-server.settings.iterateDuplicateRoutes": {
          "order": 9,
          "type": "boolean",
          "default": false,
          "description": "If true, transformDb will iterate duplicate routes using _IterateRoutes middleware"
        },
        "mock-server.settings.customWatchPaths": {
          "order": 10,
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "additionalItems": true,
          "scope": "window",
          "markdownDescription": "Set files and folder path to watch for changes. By default all the paths in `#mock-server.settings.paths#` are included for watches."
        },
        "mock-server.settings.watchForChanges": {
          "order": 11,
          "type": "boolean",
          "default": true,
          "scope": "window",
          "markdownDescription": "Watch for changes and restarts the server."
        },
        "mock-server.settings.showInfoMsg": {
          "order": 13,
          "type": "boolean",
          "default": true,
          "description": "Change this to false if you don't want to show information pop up messages."
        },
        "mock-server.settings.statusBar": {
          "order": 14,
          "type": "object",
          "default": {
            "show": true,
            "position": "Right",
            "priority": 0
          },
          "properties": {
            "show": {
              "type": "boolean",
              "default": true,
              "description": "Change this to false if you don't want the button to show in statusbar"
            },
            "position": {
              "type": "string",
              "default": "Right",
              "enum": [
                "Right",
                "Left"
              ],
              "description": "Set a custom position of the statusbar. Note: Please reload the extension to take effect."
            },
            "priority": {
              "type": "number",
              "default": 0,
              "description": "helps to reorder the placement of the statusbar. Minimum priority moves the statusbar to left most. Note: Please reload the extension to take effect."
            }
          },
          "description": "Set Statusbar Settings"
        }
      }
    },
    "keybindings": [
      {
        "command": "mockServer.transformToMockServerDB",
        "key": "alt+t",
        "mac": "alt+t"
      },
      {
        "command": "mockServer.startServer",
        "key": "alt+enter",
        "mac": "alt+enter"
      },
      {
        "command": "mockServer.stopServer",
        "key": "shift+alt+enter",
        "mac": "shift+alt+enter"
      },
      {
        "command": "mockServer.switchEnvironment",
        "key": "alt+e",
        "mac": "alt+e"
      },
      {
        "command": "mockServer.getDbSnapShot",
        "key": "alt+s",
        "mac": "alt+s"
      },
      {
        "command": "mockServer.homePage",
        "key": "alt+h",
        "mac": "alt+h"
      }
    ],
    "menus": {
      "explorer/context": [
        {
          "when": "sideBarFocus && activeViewlet == 'workbench.view.explorer' && explorerResourceIsFolder",
          "command": "mockServer.generateMockFiles",
          "group": "mock-server"
        },
        {
          "when": "sideBarFocus && activeViewlet == 'workbench.view.explorer' && explorerResourceIsFolder",
          "command": "mockServer.setRoot",
          "group": "mock-server"
        }
      ],
      "editor/context": [
        {
          "command": "mockServer.setPort",
          "group": "mock-server"
        },
        {
          "command": "mockServer.setRoot",
          "group": "mock-server"
        },
        {
          "when": "resourceExtname == .json || resourceExtname == .har",
          "command": "mockServer.transformToMockServerDB",
          "group": "mock-server"
        },
        {
          "when": "resourceExtname == .json || resourceExtname == .har",
          "command": "mockServer.getDbSnapShot",
          "group": "mock-server"
        },
        {
          "command": "mockServer.startServer",
          "group": "mock-server"
        },
        {
          "command": "mockServer.stopServer",
          "group": "mock-server"
        }
      ]
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src --ext ts"
  },
  "devDependencies": {
    "@types/chokidar": "^2.1.3",
    "@types/express": "^4.17.13",
    "@types/node": "^16.0.0",
    "@types/vscode": "^1.30.0",
    "@typescript-eslint/eslint-plugin": "^4.14.1",
    "@typescript-eslint/parser": "^4.14.1",
    "eslint": "^7.19.0",
    "typescript": "^4.1.3"
  },
  "dependencies": {
    "@r35007/mock-server": "^6.1.0",
    "axios": "^0.21.1",
    "chokidar": "^3.5.2",
    "express": "^4.17.1"
  }
}
