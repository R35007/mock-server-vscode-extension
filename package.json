{
	"name": "mock-server",
	"displayName": "Mock Server",
	"description": "Customize Your Own Dynamic Local Mock Server",
	"version": "1.0.0",
	"publisher": "Thinker",
	"license": "MIT",
	"icon": "images/mockserverlogo.png",
	"author": {
		"name": "Sivaraman",
		"email": "sendmsg2siva@gmail.com"
	},
	"repository": {
		"type": "git",
		"url": "https://github.com/R35007/mock-server"
	},
	"keywords": [
		"JSON",
		"REST",
		"API",
		"prototyping",
		"mock",
		"mocking",
		"test",
		"testing",
		"rest",
		"data",
		"dummy",
		"sandbox",
		"server",
		"fake",
		"response",
		"db",
		"local"
	],
	"engines": {
		"vscode": "^1.30.0"
	},
	"categories": [
		"Other"
	],
	"activationEvents": [
		"*"
	],
	"main": "./out/extension.js",
	"contributes": {
		"commands": [
			{
				"command": "mockServer.generateMockFromHAR",
				"title": "Generate Mock from HAR",
				"category": "MockServer"
			},
			{
				"command": "mockServer.startServer",
				"title": "Start Server",
				"category": "MockServer"
			},
			{
				"command": "mockServer.stopServer",
				"title": "Stop Server",
				"category": "MockServer"
			},
			{
				"command": "mockServer.resetServer",
				"title": "Reset Server",
				"category": "MockServer"
			},
			{
				"command": "mockServer.switchEnvironment",
				"title": "Switch Environment",
				"category": "MockServer"
			}
		],
		"configuration": {
			"title": "Mock Server",
			"properties": {
				"mock-server.settings.port": {
					"type": "number",
					"default": 3000,
					"description": "Set custom port to generate local mock server"
				},
				"mock-server.settings.environment": {
					"type": "string",
					"default": "none",
					"description": "Set custom mock environment."
				},
				"mock-server.settings.baseUrl": {
					"type": "string",
					"default": "",
					"description": "Set custom base url. This url will be added as a prefix to every routes"
				},
				"mock-server.settings.paths": {
					"type": "object",
					"default": {
						"rootPath": "./",
						"mockPath": "",
						"envPath": "",
						"staticUrl": "",
						"middlewarePath": ""
					},
					"properties": {
						"rootPath": {
							"type": "string",
							"default": "./",
							"description": "Set custom root path. Note : every other paths given in will be relative to this root path"
						},
						"mockPath": {
							"type": "string",
							"default": "",
							"description": "Set mock Path to generate local mock server. Note : If the path points to a folder, the mock will be generated for every json files inside the given folder"
						},
						"envPath": {
							"type": "string",
							"default": "",
							"description": "Set custom environment data folder Path. Note : The .json files inside the folder will be listed down for switching environment using `Switch environment` command"
						},
						"staticUrl": {
							"type": "string",
							"default": "",
							"description": "Every file under tis folder will be hosted in a localhost"
						},
						"middlewarePath": {
							"type": "string",
							"default": "",
							"description": "Provide the middleware.js path. Note: the js file must have an default module export of the middleware"
						}
					},
					"description": "set paths to start the mock server",
					"additionalProperties": false
				},
				"mock-server.settings.globals": {
					"type": "object",
					"description": "Provide any initial values before starting the server"
				},
				"mock-server.settings.injectors": {
					"type": "object",
					"description": "Provide additional route configs to inject into the routes"
				},
				"mock-server.settings.proxy": {
					"type": "object",
					"additionalProperties": {
						"type": "string"
					},
					"default": {},
					"description": "Set custom proxy that matches the route"
				},
				"mock-server.settings.excludeRoutes.addProxy": {
					"type": "boolean",
					"default": true,
					"description": "If true, This will add all proxy pattern match routes to the exclude routes list."
				},
				"mock-server.settings.excludeRoutes": {
					"type": "array",
					"description": "Provide list of routes to exclude form generate local server that matches this route",
					"items": {
						"type": "string"
					},
					"uniqueItems": true,
					"scope": "window"
				},
				"mock-server.settings.reverseRouteOrder": {
					"type": "boolean",
					"default": false,
					"description": "If true, routes will be generated in a reverse order"
				},
				"mock-server.settings.statusBar.show": {
					"type": "boolean",
					"default": true,
					"description": "Change this to false if you don't want the button to show in statusbar"
				},
				"mock-server.settings.statusBar.position": {
					"type": "string",
					"default": "Right",
					"enum": [
						"Right",
						"Left"
					],
					"description": "Set a custom position of the statusbar. Note: Please reload the extension to take effect."
				},
				"mock-server.settings.statusBar.priority": {
					"type": "number",
					"default": 0,
					"description": "helps to reorder the placement of the statusbar. Minimum priority moves the statusbar to left most. Note: Please reload the extension to take effect."
				},
				"mock-server.settings.donotShowInfoMsg": {
					"type": "boolean",
					"default": false,
					"description": "Change this to true if you don't want to show information pop up messages."
				}
			}
		}
	},
	"scripts": {
		"vscode:prepublish": "npm run compile",
		"compile": "tsc -p ./",
		"watch": "tsc -watch -p ./",
		"pretest": "npm run compile && npm run lint",
		"lint": "eslint src --ext ts"
	},
	"devDependencies": {
		"@types/vscode": "^1.30.0",
		"@types/node": "^12.11.7",
		"eslint": "^7.19.0",
		"@typescript-eslint/eslint-plugin": "^4.14.1",
		"@typescript-eslint/parser": "^4.14.1",
		"typescript": "^4.1.3"
	},
	"dependencies": {
		"@r35007/mock-server": "^1.0.3",
		"@types/express": "^4.17.11"
	}
}