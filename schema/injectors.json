{
  "$schema": "http://json-schema.org/schema",
  "type": "array",
  "items": {
    "type": "object",
    "required": [
      "routes"
    ],
    "properties": {
      "routes": {
        "oneOf": [
          {
            "type": "string"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "description": "Prove a route pattern to inject configuration."
      },
      "override": {
        "type": "boolean",
        "description": "Whether to override existing configuration."
      },
      "exact": {
        "type": "boolean",
        "description": "Enable to match exact route instead of pattern matching route."
      },
      "id": {
        "type": [
          "string",
          "number"
        ],
        "description": "Provide a custom id for the route else it will get auto generated by converting the route path to a base64 string."
      },
      "description": {
        "type": "string",
        "description": "Description of the route."
      },
      "mock": {
        "type": [
          "boolean",
          "array",
          "integer",
          "number",
          "object",
          "string"
        ],
        "description": "Provide a custom mock response."
      },
      "fetch": {
        "oneOf": [
          {
            "type": "string"
          },
          {
            "type": "object",
            "additionalProperties": true,
            "required": ["url"],
            "properties": {
              "url": {
                "type": "string",
                "description": "The URL for the request"
              },
              "method": {
                "type": "string",
                "enum": [
                  "GET",
                  "HEAD",
                  "POST",
                  "PUT",
                  "DELETE",
                  "CONNECT",
                  "OPTIONS",
                  "TRACE",
                  "PATCH"
                ],
                "description": "The HTTP method for the request"
              },
              "headers": {
                "type": "object",
                "description": "An object containing the request headers"
              },
              "params": {
                "type": "object",
                "description": "An object containing the query parameters for the request"
              },
              "data": {
                "type": [
                  "boolean",
                  "array",
                  "integer",
                  "number",
                  "object",
                  "string"
                ],
                "description": "The data to be sent as the request body. Can be a string, object, or array."
              },
              "timeout": {
                "type": "number",
                "description": "The number of milliseconds before the request times out"
              },
              "responseType": {
                "type": "string",
                "enum": [
                  "arraybuffer",
                  "blob",
                  "document",
                  "json",
                  "text"
                ],
                "description": "The type of data that the server is expected to return"
              }
            }
          }
        ],
        "description": "Please provide a http url or file path or AxisRequest object to fetch the data."
      },
      "store": {
        "type": "object",
        "description": "Provide any store value which can be shared across routes."
      },
      "statusCode": {
        "type": "number",
        "minimum": 100,
        "maximum": 599,
        "description": "Provide a custom status code for the response."
      },
      "delay": {
        "type": "number",
        "description": "Give delay in milliseconds"
      },
      "fetchCount": {
        "type": "number",
        "description": "Set fetchCount to -1 to fetch infinite times."
      },
      "skipFetchError": {
        "type": "boolean",
        "description": "If true, It skips any fetch error and send the mock data as a response if provided"
      },
      "mockFirst": {
        "type": "boolean",
        "description": "If true, it always sends the mock data as a response if provided else it try's to make a fetch call by default."
      },
      "middlewares": {
        "oneOf": [
          {
            "type": "string"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "description": "GIve a middleware function names that should be called for this route. The given middleware must be present in the `middlewares.js` file"
      },
      "directUse": {
        "type": "boolean",
        "description": "If true, the route directly uses the given middleware without any other helper middlewares."
      },
      "headers": {
        "type": "object",
        "description": "Provide a custom response headers for this route."
      }
    }
  }
}
